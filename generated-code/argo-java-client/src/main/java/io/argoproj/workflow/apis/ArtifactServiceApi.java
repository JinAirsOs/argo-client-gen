/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.argoproj.workflow.apis;

import com.google.gson.reflect.TypeToken;
import io.argoproj.workflow.*;

import java.io.File;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ArtifactServiceApi {
    private ApiClient localVarApiClient;

    public ArtifactServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ArtifactServiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for artifactServiceGetInputArtifact
     * @param namespace  (required)
     * @param name  (required)
     * @param nodeId  (required)
     * @param artifactName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An artifact file. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artifactServiceGetInputArtifactCall(String namespace, String name, String nodeId, String artifactName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/input-artifacts/{namespace}/{name}/{nodeId}/{artifactName}"
            .replaceAll("\\{" + "namespace" + "\\}", localVarApiClient.escapeString(namespace.toString()))
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "nodeId" + "\\}", localVarApiClient.escapeString(nodeId.toString()))
            .replaceAll("\\{" + "artifactName" + "\\}", localVarApiClient.escapeString(artifactName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call artifactServiceGetInputArtifactValidateBeforeCall(String namespace, String name, String nodeId, String artifactName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling artifactServiceGetInputArtifact(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling artifactServiceGetInputArtifact(Async)");
        }
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling artifactServiceGetInputArtifact(Async)");
        }
        
        // verify the required parameter 'artifactName' is set
        if (artifactName == null) {
            throw new ApiException("Missing the required parameter 'artifactName' when calling artifactServiceGetInputArtifact(Async)");
        }
        

        okhttp3.Call localVarCall = artifactServiceGetInputArtifactCall(namespace, name, nodeId, artifactName, _callback);
        return localVarCall;

    }

    /**
     * Get an input artifact.
     * 
     * @param namespace  (required)
     * @param name  (required)
     * @param nodeId  (required)
     * @param artifactName  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An artifact file. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public void artifactServiceGetInputArtifact(String namespace, String name, String nodeId, String artifactName) throws ApiException {
        artifactServiceGetInputArtifactWithHttpInfo(namespace, name, nodeId, artifactName);
    }

    /**
     * Get an input artifact.
     * 
     * @param namespace  (required)
     * @param name  (required)
     * @param nodeId  (required)
     * @param artifactName  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An artifact file. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> artifactServiceGetInputArtifactWithHttpInfo(String namespace, String name, String nodeId, String artifactName) throws ApiException {
        okhttp3.Call localVarCall = artifactServiceGetInputArtifactValidateBeforeCall(namespace, name, nodeId, artifactName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get an input artifact. (asynchronously)
     * 
     * @param namespace  (required)
     * @param name  (required)
     * @param nodeId  (required)
     * @param artifactName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An artifact file. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artifactServiceGetInputArtifactAsync(String namespace, String name, String nodeId, String artifactName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = artifactServiceGetInputArtifactValidateBeforeCall(namespace, name, nodeId, artifactName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for artifactServiceGetInputArtifactByUID
     * @param namespace  (required)
     * @param uid  (required)
     * @param nodeId  (required)
     * @param artifactName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An artifact file. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artifactServiceGetInputArtifactByUIDCall(String namespace, String uid, String nodeId, String artifactName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/input-artifacts-by-uid/{uid}/{nodeId}/{artifactName}"
            .replaceAll("\\{" + "namespace" + "\\}", localVarApiClient.escapeString(namespace.toString()))
            .replaceAll("\\{" + "uid" + "\\}", localVarApiClient.escapeString(uid.toString()))
            .replaceAll("\\{" + "nodeId" + "\\}", localVarApiClient.escapeString(nodeId.toString()))
            .replaceAll("\\{" + "artifactName" + "\\}", localVarApiClient.escapeString(artifactName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call artifactServiceGetInputArtifactByUIDValidateBeforeCall(String namespace, String uid, String nodeId, String artifactName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling artifactServiceGetInputArtifactByUID(Async)");
        }
        
        // verify the required parameter 'uid' is set
        if (uid == null) {
            throw new ApiException("Missing the required parameter 'uid' when calling artifactServiceGetInputArtifactByUID(Async)");
        }
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling artifactServiceGetInputArtifactByUID(Async)");
        }
        
        // verify the required parameter 'artifactName' is set
        if (artifactName == null) {
            throw new ApiException("Missing the required parameter 'artifactName' when calling artifactServiceGetInputArtifactByUID(Async)");
        }
        

        okhttp3.Call localVarCall = artifactServiceGetInputArtifactByUIDCall(namespace, uid, nodeId, artifactName, _callback);
        return localVarCall;

    }

    /**
     * Get an input artifact by UID.
     * 
     * @param namespace  (required)
     * @param uid  (required)
     * @param nodeId  (required)
     * @param artifactName  (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An artifact file. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public File artifactServiceGetInputArtifactByUID(String namespace, String uid, String nodeId, String artifactName) throws ApiException {
        ApiResponse<File> localVarResp = artifactServiceGetInputArtifactByUIDWithHttpInfo(namespace, uid, nodeId, artifactName);
        return localVarResp.getData();
    }

    /**
     * Get an input artifact by UID.
     * 
     * @param namespace  (required)
     * @param uid  (required)
     * @param nodeId  (required)
     * @param artifactName  (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An artifact file. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> artifactServiceGetInputArtifactByUIDWithHttpInfo(String namespace, String uid, String nodeId, String artifactName) throws ApiException {
        okhttp3.Call localVarCall = artifactServiceGetInputArtifactByUIDValidateBeforeCall(namespace, uid, nodeId, artifactName, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an input artifact by UID. (asynchronously)
     * 
     * @param namespace  (required)
     * @param uid  (required)
     * @param nodeId  (required)
     * @param artifactName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An artifact file. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artifactServiceGetInputArtifactByUIDAsync(String namespace, String uid, String nodeId, String artifactName, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = artifactServiceGetInputArtifactByUIDValidateBeforeCall(namespace, uid, nodeId, artifactName, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for artifactServiceGetOutputArtifact
     * @param namespace  (required)
     * @param name  (required)
     * @param nodeId  (required)
     * @param artifactName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An artifact file. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artifactServiceGetOutputArtifactCall(String namespace, String name, String nodeId, String artifactName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/artifacts/{namespace}/{name}/{nodeId}/{artifactName}"
            .replaceAll("\\{" + "namespace" + "\\}", localVarApiClient.escapeString(namespace.toString()))
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()))
            .replaceAll("\\{" + "nodeId" + "\\}", localVarApiClient.escapeString(nodeId.toString()))
            .replaceAll("\\{" + "artifactName" + "\\}", localVarApiClient.escapeString(artifactName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call artifactServiceGetOutputArtifactValidateBeforeCall(String namespace, String name, String nodeId, String artifactName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling artifactServiceGetOutputArtifact(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling artifactServiceGetOutputArtifact(Async)");
        }
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling artifactServiceGetOutputArtifact(Async)");
        }
        
        // verify the required parameter 'artifactName' is set
        if (artifactName == null) {
            throw new ApiException("Missing the required parameter 'artifactName' when calling artifactServiceGetOutputArtifact(Async)");
        }
        

        okhttp3.Call localVarCall = artifactServiceGetOutputArtifactCall(namespace, name, nodeId, artifactName, _callback);
        return localVarCall;

    }

    /**
     * Get an output artifact.
     * 
     * @param namespace  (required)
     * @param name  (required)
     * @param nodeId  (required)
     * @param artifactName  (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An artifact file. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public File artifactServiceGetOutputArtifact(String namespace, String name, String nodeId, String artifactName) throws ApiException {
        ApiResponse<File> localVarResp = artifactServiceGetOutputArtifactWithHttpInfo(namespace, name, nodeId, artifactName);
        return localVarResp.getData();
    }

    /**
     * Get an output artifact.
     * 
     * @param namespace  (required)
     * @param name  (required)
     * @param nodeId  (required)
     * @param artifactName  (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An artifact file. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> artifactServiceGetOutputArtifactWithHttpInfo(String namespace, String name, String nodeId, String artifactName) throws ApiException {
        okhttp3.Call localVarCall = artifactServiceGetOutputArtifactValidateBeforeCall(namespace, name, nodeId, artifactName, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an output artifact. (asynchronously)
     * 
     * @param namespace  (required)
     * @param name  (required)
     * @param nodeId  (required)
     * @param artifactName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An artifact file. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artifactServiceGetOutputArtifactAsync(String namespace, String name, String nodeId, String artifactName, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = artifactServiceGetOutputArtifactValidateBeforeCall(namespace, name, nodeId, artifactName, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for artifactServiceGetOutputArtifactByUID
     * @param uid  (required)
     * @param nodeId  (required)
     * @param artifactName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An artifact file. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artifactServiceGetOutputArtifactByUIDCall(String uid, String nodeId, String artifactName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/artifacts-by-uid/{uid}/{nodeId}/{artifactName}"
            .replaceAll("\\{" + "uid" + "\\}", localVarApiClient.escapeString(uid.toString()))
            .replaceAll("\\{" + "nodeId" + "\\}", localVarApiClient.escapeString(nodeId.toString()))
            .replaceAll("\\{" + "artifactName" + "\\}", localVarApiClient.escapeString(artifactName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BearerToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call artifactServiceGetOutputArtifactByUIDValidateBeforeCall(String uid, String nodeId, String artifactName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'uid' is set
        if (uid == null) {
            throw new ApiException("Missing the required parameter 'uid' when calling artifactServiceGetOutputArtifactByUID(Async)");
        }
        
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling artifactServiceGetOutputArtifactByUID(Async)");
        }
        
        // verify the required parameter 'artifactName' is set
        if (artifactName == null) {
            throw new ApiException("Missing the required parameter 'artifactName' when calling artifactServiceGetOutputArtifactByUID(Async)");
        }
        

        okhttp3.Call localVarCall = artifactServiceGetOutputArtifactByUIDCall(uid, nodeId, artifactName, _callback);
        return localVarCall;

    }

    /**
     * Get an output artifact by UID.
     * 
     * @param uid  (required)
     * @param nodeId  (required)
     * @param artifactName  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An artifact file. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public void artifactServiceGetOutputArtifactByUID(String uid, String nodeId, String artifactName) throws ApiException {
        artifactServiceGetOutputArtifactByUIDWithHttpInfo(uid, nodeId, artifactName);
    }

    /**
     * Get an output artifact by UID.
     * 
     * @param uid  (required)
     * @param nodeId  (required)
     * @param artifactName  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An artifact file. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> artifactServiceGetOutputArtifactByUIDWithHttpInfo(String uid, String nodeId, String artifactName) throws ApiException {
        okhttp3.Call localVarCall = artifactServiceGetOutputArtifactByUIDValidateBeforeCall(uid, nodeId, artifactName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get an output artifact by UID. (asynchronously)
     * 
     * @param uid  (required)
     * @param nodeId  (required)
     * @param artifactName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An artifact file. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call artifactServiceGetOutputArtifactByUIDAsync(String uid, String nodeId, String artifactName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = artifactServiceGetOutputArtifactByUIDValidateBeforeCall(uid, nodeId, artifactName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
