/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.argoproj.workflow.v1alpha;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.argoproj.workflow.v1alpha.OAuth2EndpointParam;
import io.kubernetes.client.models.V1SecretKeySelector;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for OAuth2Auth
 */
public class OAuth2AuthTest {
    private final OAuth2Auth model = new OAuth2Auth();

    /**
     * Model tests for OAuth2Auth
     */
    @Test
    public void testOAuth2Auth() {
        // TODO: test OAuth2Auth
    }

    /**
     * Test the property 'clientIDSecret'
     */
    @Test
    public void clientIDSecretTest() {
        // TODO: test clientIDSecret
    }

    /**
     * Test the property 'clientSecretSecret'
     */
    @Test
    public void clientSecretSecretTest() {
        // TODO: test clientSecretSecret
    }

    /**
     * Test the property 'endpointParams'
     */
    @Test
    public void endpointParamsTest() {
        // TODO: test endpointParams
    }

    /**
     * Test the property 'scopes'
     */
    @Test
    public void scopesTest() {
        // TODO: test scopes
    }

    /**
     * Test the property 'tokenURLSecret'
     */
    @Test
    public void tokenURLSecretTest() {
        // TODO: test tokenURLSecret
    }

}
