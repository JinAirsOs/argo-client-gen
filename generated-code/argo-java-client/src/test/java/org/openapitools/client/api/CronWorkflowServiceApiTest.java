/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import io.argoproj.workflow.v1alpha.*;
import org.junit.Ignore;
import org.junit.Test;
import org.openapitools.client.ApiException;

import java.util.List;

/**
 * API tests for CronWorkflowServiceApi
 */
@Ignore
public class CronWorkflowServiceApiTest {

    private final CronWorkflowServiceApi api = new CronWorkflowServiceApi();

    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cronWorkflowServiceCreateCronWorkflowTest() throws ApiException {
        String namespace = null;
        CreateCronWorkflowRequest body = null;
        CronWorkflow response = api.cronWorkflowServiceCreateCronWorkflow(namespace, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cronWorkflowServiceDeleteCronWorkflowTest() throws ApiException {
        String namespace = null;
        String name = null;
        String deleteOptionsGracePeriodSeconds = null;
        String deleteOptionsPreconditionsUid = null;
        String deleteOptionsPreconditionsResourceVersion = null;
        Boolean deleteOptionsOrphanDependents = null;
        String deleteOptionsPropagationPolicy = null;
        List<String> deleteOptionsDryRun = null;
        Object response = api.cronWorkflowServiceDeleteCronWorkflow(namespace, name, deleteOptionsGracePeriodSeconds, deleteOptionsPreconditionsUid, deleteOptionsPreconditionsResourceVersion, deleteOptionsOrphanDependents, deleteOptionsPropagationPolicy, deleteOptionsDryRun);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cronWorkflowServiceGetCronWorkflowTest() throws ApiException {
        String namespace = null;
        String name = null;
        String getOptionsResourceVersion = null;
        CronWorkflow response = api.cronWorkflowServiceGetCronWorkflow(namespace, name, getOptionsResourceVersion);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cronWorkflowServiceLintCronWorkflowTest() throws ApiException {
        String namespace = null;
        LintCronWorkflowRequest body = null;
        CronWorkflow response = api.cronWorkflowServiceLintCronWorkflow(namespace, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cronWorkflowServiceListCronWorkflowsTest() throws ApiException {
        String namespace = null;
        String listOptionsLabelSelector = null;
        String listOptionsFieldSelector = null;
        Boolean listOptionsWatch = null;
        Boolean listOptionsAllowWatchBookmarks = null;
        String listOptionsResourceVersion = null;
        String listOptionsResourceVersionMatch = null;
        String listOptionsTimeoutSeconds = null;
        String listOptionsLimit = null;
        String listOptionsContinue = null;
        CronWorkflowList response = api.cronWorkflowServiceListCronWorkflows(namespace, listOptionsLabelSelector, listOptionsFieldSelector, listOptionsWatch, listOptionsAllowWatchBookmarks, listOptionsResourceVersion, listOptionsResourceVersionMatch, listOptionsTimeoutSeconds, listOptionsLimit, listOptionsContinue);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cronWorkflowServiceResumeCronWorkflowTest() throws ApiException {
        String namespace = null;
        String name = null;
        CronWorkflowResumeRequest body = null;
        CronWorkflow response = api.cronWorkflowServiceResumeCronWorkflow(namespace, name, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cronWorkflowServiceSuspendCronWorkflowTest() throws ApiException {
        String namespace = null;
        String name = null;
        CronWorkflowSuspendRequest body = null;
        CronWorkflow response = api.cronWorkflowServiceSuspendCronWorkflow(namespace, name, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cronWorkflowServiceUpdateCronWorkflowTest() throws ApiException {
        String namespace = null;
        String name = null;
        UpdateCronWorkflowRequest body = null;
        CronWorkflow response = api.cronWorkflowServiceUpdateCronWorkflow(namespace, name, body);

        // TODO: test validations
    }
    
}
